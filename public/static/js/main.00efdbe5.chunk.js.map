{"version":3,"sources":["Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","allInfo","fullName","email","projectRepo","projectUrl","bestpracticeOOP","modularDevelopment","fulWorkUnderstanding","testing","databaseKnowledge","debugging","probSolvingSkills","javascript","html","css","workingTeam","selfMotivation","communicationSkills","ownEnergyLvl","intAptitude","className","onSubmit","e","handleSubmit","type","name","required","value","onChange","updateInput","placeholder","min","App","preventDefault","axios","post","process","state","then","responseFromBackEnd","status","data","errors","console","log","setState","totalPoint","alert","window","scrollTo","catch","err","target","theValue","Number","theInfo","maxPoint","theTotal","x","this","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.00efdbe5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Form = (props) => {\r\n    const {fullName, email, projectRepo, projectUrl, bestpracticeOOP, modularDevelopment, fulWorkUnderstanding, testing, databaseKnowledge, debugging,\r\n        probSolvingSkills, javascript, html, css, workingTeam, selfMotivation, communicationSkills, ownEnergyLvl, intAptitude} = props.allInfo\r\n\r\n    return(\r\n        <form className='the-form' onSubmit={e => props.handleSubmit(e)}>\r\n        <div className='user-info'>\r\n        <input type='text' name='fullName' required value={fullName} onChange={e => props.updateInput(e)} placeholder='FULL NAME'></input>\r\n        <input type='email' name='email' required value={email} onChange={e => props.updateInput(e)} placeholder='EMAIL'></input>\r\n        <input type='text' name='projectRepo' required value={projectRepo} onChange={e => props.updateInput(e)} placeholder='PROJECT REPO'></input>\r\n        <input type='text' name='projectUrl' required value={projectUrl} onChange={e => props.updateInput(e)} placeholder='PROJECT URL'></input>\r\n        </div>\r\n\r\n        <div className='skills-form'>\r\n        \r\n        <div className='form-skill'>\r\n        <label>USING BEST PRACTICES FOR OOP:</label>\r\n        <input type='number' name='bestpracticeOOP' min={0} value={bestpracticeOOP} onChange={e => props.updateInput(e)}></input>\r\n        </div>\r\n\r\n        <div className='form-skill'>\r\n        <label>MODULAR DEVELOPMENT:</label>\r\n        <input type='number' name='modularDevelopment' min={0} value={modularDevelopment} onChange={e => props.updateInput(e)}></input>\r\n        </div>\r\n\r\n        <div className='form-skill'>\r\n        <label>FULL STACK WORKFLOW UNDERSTANDING:</label>\r\n        <input type='number' name='fulWorkUnderstanding' min={0} value={fulWorkUnderstanding} onChange={e => props.updateInput(e)}></input>\r\n        </div>\r\n\r\n        <div className='form-skill'>\r\n        <label>TESTING:</label>\r\n        <input type='number' name='testing' min={0} value={testing} onChange={e => props.updateInput(e)}></input>\r\n        </div>\r\n\r\n        <div className='form-skill'>\r\n        <label>DATABASE KNOWLEDGE:</label>\r\n        <input type='number' name='databaseKnowledge' min={0} value={databaseKnowledge} onChange={e => props.updateInput(e)}></input>\r\n        </div>\r\n\r\n        <div className='form-skill'>\r\n        <label>DEBUGGING:</label>\r\n        <input type='number' name='debugging' min={0} value={debugging} onChange={e => props.updateInput(e)}></input>\r\n        </div>\r\n\r\n        <div className='form-skill'>\r\n        <label>PROBLEM SOLVING SKILLS:</label>\r\n        <input type='number' name='probSolvingSkills' min={0} value={probSolvingSkills} onChange={e => props.updateInput(e)}></input>\r\n        </div>\r\n\r\n        <div className='form-skill'>\r\n        <label>JAVASCRIPT:</label>\r\n        <input type='number' name='javascript' min={0} value={javascript} onChange={e => props.updateInput(e)}></input>\r\n        </div>\r\n\r\n        <div className='form-skill'>\r\n        <label>HTML:</label>\r\n        <input type='number' name='html' min={0} value={html} onChange={e => props.updateInput(e)}></input>\r\n        </div>\r\n\r\n        <div className='form-skill'>\r\n        <label>CSS:</label>\r\n        <input type='number' name='css' min={0} value={css} onChange={e => props.updateInput(e)}></input>\r\n        </div>\r\n\r\n        <div className='form-skill'>\r\n        <label>WORKING ON A TEAM:</label>\r\n        <input type='number' name='workingTeam' min={0} value={workingTeam} onChange={e => props.updateInput(e)}></input>\r\n        </div>\r\n\r\n        <div className='form-skill'>\r\n        <label>SELF MOTIVATION:</label>\r\n        <input type='number' name='selfMotivation' min={0} value={selfMotivation} onChange={e => props.updateInput(e)}></input>\r\n        </div>\r\n\r\n        <div className='form-skill'>\r\n        <label>COMMUNICATIONS SKILLS:</label>\r\n        <input type='number' name='communicationSkills' min={0} value={communicationSkills} onChange={e => props.updateInput(e)}></input>\r\n        </div>\r\n\r\n        <div className='form-skill'>\r\n        <label>YOUR OWN ENERGY LEVEL:</label>\r\n        <input type='number' name='ownEnergyLvl' min={0} value={ownEnergyLvl} onChange={e => props.updateInput(e)}></input>\r\n        </div>\r\n\r\n        <div className='form-skill'>\r\n        <label>INTELLIGENCE / APTITUDE:</label>\r\n        <input type='number' name='intAptitude' min={0} value={intAptitude} onChange={e => props.updateInput(e)}></input>\r\n        </div>\r\n\r\n        </div>\r\n        <button>SUBMIT</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form","import React from 'react';\nimport './App.css';\nimport Form from './Components/Form';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      fullName:'',\n      email:'',\n      projectRepo:'',\n      projectUrl: '',\n      bestpracticeOOP: 0,\n      modularDevelopment: 0,\n      fulWorkUnderstanding: 0,\n      testing: 0,\n      databaseKnowledge: 0,\n      debugging: 0,\n      probSolvingSkills: 0,\n      javascript: 0,\n      html: 0,\n      css: 0,\n      workingTeam: 0,\n      selfMotivation: 0,\n      communicationSkills: 0,\n      ownEnergyLvl: 0,\n      intAptitude: 0,\n      maxPoint: 51,\n      totalPoint: 0,\n    }\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    axios.post(`${process.env.REACT_APP_HEROKU}/submitForm`, this.state)\n    .then(responseFromBackEnd => {\n      if(responseFromBackEnd.status === 200 && !responseFromBackEnd.data.errors){\n        this.setState({\n          fullName:'',\n          email:'',\n          projectRepo:'',\n          projectUrl: '',\n          bestpracticeOOP: 0,\n          modularDevelopment: 0,\n          fulWorkUnderstanding: 0,\n          testing: 0,\n          databaseKnowledge: 0,\n          debugging: 0,\n          probSolvingSkills: 0,\n          javascript: 0,\n          html: 0,\n          css: 0,\n          workingTeam: 0,\n          selfMotivation: 0,\n          communicationSkills: 0,\n          ownEnergyLvl: 0,\n          intAptitude: 0,\n          totalPoint: 0,\n        }, () => {\n          alert(\"THANK YOU! YOUR APPLICATION WAS SUCCESSFULLY SUBMITED!\")\n          window.scrollTo(0, 0);\n        })\n        \n      }else{\n        console.log(responseFromBackEnd.data.errors)\n      }\n\n    }).catch(err => console.log(err))\n  }\n\n  updateInput = (e) => {\n    e.preventDefault();\n    const {name, value, type} = e.target;\n    let theValue = Number(value)\n\n    if(type !== 'number'){\n      this.setState({\n        [name]: value\n      })\n    }else{\n      \n      const theInfo = this.state\n\n      if(this.state.totalPoint === 50){\n        if(theValue > theInfo[name]){\n          theValue -= 1\n        }\n      }\n\n      if(this.state.totalPoint < this.state.maxPoint){\n        theInfo[name] = theValue \n      }\n    \n      let theTotal = 0\n\n      for(let x in this.state){\n        if(typeof this.state[x] === 'number' && x !== 'maxPoint' && x !== 'totalPoint'){\n          theTotal += theInfo[x]\n        }\n       \n      }\n\n      if(theTotal < this.state.maxPoint){\n        this.setState({\n          [name]: theValue,\n          totalPoint: theTotal \n          })\n      }\n\n\n    }\n\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n    <Form allInfo={this.state} updateInput={this.updateInput} handleSubmit={this.handleSubmit}/>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}